import streamlit as st
import helpers.sidebar
import asyncio
from services.images import generate_image
import pandas as pd
from services.images import get_all_images, delete_image

st.set_page_config(
    page_title="Images",
    page_icon="üèûÔ∏è",
    layout="wide"
)

helpers.sidebar.show()

st.header("Image Generation")

# This page should have 2 tabs, the first being named 'Image Generation' and the second 'Image List'.
# On the 'image_generation' tab, lets have a text input field with the label 'Prompt' and the placeholder 'Enter a prompt for the image generation model'.
# Below the llm input field, lets have a button with the label 'Generate Image' that when clicked, will call the 'generate_image' function from images.py.
# When we get a response from the 'generate_image' function, we should display the image that was generated.


tab1, tab2 = st.tabs(["Image Generation", "Image List"])

with tab1:
    prompt = st.text_input("Prompt", placeholder="Enter a prompt for the image generation model")
    if st.button("Generate Image"):
        with st.spinner("Generating image..."):
            image_path = asyncio.run(generate_image(prompt))
            if image_path:
                st.image(image_path, caption=prompt)


# On the 'image_list' tab, lets have a table with the columns 'Image', 'Description', 'Date Created', and 'Actions'.
# It should display the images that have been generated by the user, along with the description, date created, and buttons to view and delete the image.
# We find the images by calling the 'get_all_images' function from images.py which returns a Pandas dataframe we can use with streamlit to show the table.
# In the actions column: The 'View' button should display the image in a modal when clicked. The 'Delete' button should delete the image from the list when clicked,
# and also delete the image file from the filesystem.  This should be done in a method called 'delete_image' in images.py.
# The description is returned as a string from the 'get_all_images' function, and the date created is a datetime object that should be formatted as a string.

with tab2:
    images_df = get_all_images()
    
    if not images_df.empty:
        col1, col2, col3, col4 = st.columns([2, 4, 2, 2])
        col1.write("Image")
        col2.write("Description")
        col3.write("Date Created")
        col4.write("Actions")
        
        for index, row in images_df.iterrows():
            col1, col2, col3, col4 = st.columns([2, 4, 2, 2])
            col1.image(row['image_path'], width=100)
            col2.write(row['description'])
            col3.write(row['date_created'].strftime("%Y-%m-%d %H:%M:%S"))
            with col4:
                view_button = st.button("üîé View", key=f"view_{index}")
                delete_button = st.button("üóëÔ∏è Delete", key=f"delete_{index}")
                
                if view_button:
                    st.image(row['image_path'], caption=row['description'])
                if delete_button:
                    delete_image(row['image_path'])
                    st.rerun()
    else:
        st.write("No images found.")

